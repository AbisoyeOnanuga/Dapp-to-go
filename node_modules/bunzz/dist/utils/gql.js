var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { gql, request } from 'graphql-request';
import { JSDOM } from 'jsdom';
export const PROD_BFF = 'https://bff.bunzz.dev/graphql';
export const LOCAL_BFF = 'http://127.0.0.1:8081/graphql';
export const PROD_FE = 'https://app.bunzz.dev';
export const LOCAL_FE = 'http://localhost:3000';
export const fetchContractInfo = (options, chainId, contractAddress) => __awaiter(void 0, void 0, void 0, function* () {
    const query = gql `
    query FetchContractDoc($in: FetchContractDocInput!) {
      fetchContractDoc(in: $in) {
        document {
          code
          contractName
          optimizationUsed
          runs
          solidityVersion
        }
      }
    }
  `;
    const variables = {
        in: {
            chainId,
            contractAddress,
        },
    };
    let url;
    switch (options.env) {
        case 'local':
            url = LOCAL_BFF;
            break;
        default:
            url = PROD_BFF;
            break;
    }
    try {
        const response = yield request(url, query, variables);
        const { code, contractName, optimizationUsed, runs, solidityVersion } = response.fetchContractDoc.document;
        return { code, contractName, optimizationUsed, runs, solidityVersion };
    }
    catch (error) {
        handleGqlError(error);
        throw new Error('Failed to fetch contract from bunzz.dev');
    }
});
export const parseCode = (code, name) => {
    const sourceHasSettings = code.startsWith('{{') && code.endsWith('}}');
    try {
        return JSON.parse(sourceHasSettings ? code.slice(1, -1) : code);
    }
    catch (e) {
        return {
            sources: {
                [`contracts/${name}.sol`]: {
                    content: code,
                },
            },
        };
    }
};
export const sendArtifacts = (options, abi, bytecode, contractName) => __awaiter(void 0, void 0, void 0, function* () {
    const mutation = gql `
    mutation CreateArtifacts($req: CreateArtifactsReq!) {
      createArtifacts(req: $req) {
        id
      }
    }
  `;
    const variables = {
        req: {
            abi: JSON.stringify(abi),
            bytecode,
            contractName,
        },
    };
    let url;
    switch (options.env) {
        case 'local':
            url = LOCAL_BFF;
            break;
        default:
            url = PROD_BFF;
            break;
    }
    try {
        const response = yield request(url, mutation, variables);
        return response.createArtifacts.id;
    }
    catch (error) {
        handleGqlError(error);
        throw new Error('Failed to send artifacts to bunzz.dev');
    }
});
export const sendCloningAnalytics = (options, chainId, contractAddress, contractName) => __awaiter(void 0, void 0, void 0, function* () {
    const mutation = gql `
    mutation ClonedContract($req: ClonedContractReq!) {
      clonedContract(req: $req) {
        status
      }
    }
  `;
    const variables = {
        req: {
            chainId,
            contractAddress,
            contractName,
        },
    };
    let url;
    switch (options.env) {
        case 'local':
            url = LOCAL_BFF;
            break;
        default:
            url = PROD_BFF;
            break;
    }
    try {
        const response = yield request(url, mutation, variables);
        return response.clonedContract.status;
    }
    catch (error) {
        console.log("Failed to send analytics to bunzz.dev");
        console.error(error);
        handleGqlError(error);
        console.log("This error does not impact the cloning process and can be ignored");
    }
});
const handleGqlError = (error) => {
    var _a, _b, _c;
    if (error.response) {
        if (error.response.error) {
            const dom = new JSDOM(error.response.error);
            let specificError = (_c = (_b = (_a = dom === null || dom === void 0 ? void 0 : dom.window) === null || _a === void 0 ? void 0 : _a.document) === null || _b === void 0 ? void 0 : _b.querySelector('pre')) === null || _c === void 0 ? void 0 : _c.textContent;
            if (specificError)
                console.log(specificError);
        }
        if (error.response.errors) {
            if (Array.isArray(error.response.errors)) {
                error.response.errors.forEach((err) => {
                    console.log(err.message); // Assuming the error object has a message property
                });
            }
            else {
                console.log(error.response.errors);
            }
        }
    }
};
//# sourceMappingURL=gql.js.map