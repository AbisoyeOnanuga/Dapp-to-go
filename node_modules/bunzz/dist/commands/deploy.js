var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import fs from 'fs';
import jsonfile from 'jsonfile';
import open from 'open';
import path from 'path';
import { LOCAL_FE, PROD_FE, sendArtifacts, } from '../utils/gql.js';
const getRootContractNameFromConfig = (projectPath) => {
    // There is a bunzz.config.json file
    // Read contractName from it
    const bunzzConfigPath = path.join(projectPath, 'bunzz.config.json');
    if (!fs.existsSync(bunzzConfigPath)) {
        throw new Error('No bunzz.config.json file found. Please specifiy a contract name with -c.');
    }
    const bunzzConfig = jsonfile.readFileSync(bunzzConfigPath);
    if (!bunzzConfig.contractName) {
        throw new Error('No contractName found in bunzz.config.json. Please specify a contractName.');
    }
    return bunzzConfig.contractName;
};
const getArtifacts = (projectPath, rootContractName) => {
    function findInDir(dir, filename) {
        let results = [];
        fs.readdirSync(dir).forEach((dirInner) => {
            dirInner = path.resolve(dir, dirInner);
            const stat = fs.statSync(dirInner);
            if (stat.isDirectory()) {
                results = results.concat(findInDir(dirInner, filename));
            }
            if (stat.isFile() && path.basename(dirInner) === filename) {
                results.push(dirInner);
            }
        });
        return results;
    }
    // Find the compiled contract in the artifacts folder
    const contractNameJson = `${rootContractName}.json`;
    const artifactsDirectories = path.join(projectPath, 'artifacts');
    const contractPaths = findInDir(artifactsDirectories, contractNameJson);
    if (!contractPaths.length) {
        throw new Error(`Contract ${rootContractName} not found in artifacts folder. Exiting.`);
    }
    try {
        // read the json file
        const contractJson = fs.readFileSync(contractPaths[0], 'utf8');
        // parse the json
        const contract = JSON.parse(contractJson);
        const ABI = contract.abi;
        const bytecode = contract.bytecode;
        const path = contractPaths[0];
        const startIndex = path.indexOf('artifacts');
        const truncatedPath = path.substring(startIndex);
        console.log(`Found contract ${rootContractName} in ${truncatedPath}`);
        return { ABI, bytecode };
    }
    catch (e) {
        throw new Error(`Error occurred when reading contract ${rootContractName}: ${e.message}`);
    }
};
const openFrontend = (options, id) => __awaiter(void 0, void 0, void 0, function* () {
    let url;
    switch (options.env) {
        case 'local':
            url = LOCAL_FE;
            break;
        default:
            url = PROD_FE;
            break;
    }
    const finalUrl = `${url}/deploy/${id}`;
    try {
        yield open(finalUrl);
    }
    catch (e) {
        throw new Error(`Failed to open browser at ${finalUrl}, please open manually.`);
    }
});
const main = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const projectPath = path.resolve(options.path || process.cwd());
    let rootContractName = options.contract;
    try {
        if (!rootContractName) {
            rootContractName = getRootContractNameFromConfig(projectPath);
        }
        console.log(`Deploying contract ${rootContractName}${options.env !== 'prod' ? ` to ${options.env} environment` : ``}\n`);
        const { ABI, bytecode } = getArtifacts(projectPath, rootContractName);
        const id = yield sendArtifacts(options, ABI, bytecode, rootContractName);
        yield openFrontend(options, id);
        console.log('Done');
    }
    catch (e) {
        console.error(e.message);
    }
});
export default main;
//# sourceMappingURL=deploy.js.map