import { FrameworkEnum, NodeVersionEnum, ProjectStateEnum, ProviderEnum, ProtocolEnum, DomainTypeEnum, DeploymentStatusEnum, ScopeExtractor, SpheronApi, TokenScope } from '@spheron/core';
export { DeploymentStatusEnum, FrameworkEnum, NodeVersionEnum, ProjectStateEnum, ProtocolEnum, ProviderEnum, TokenScope } from '@spheron/core';

interface Organization {
    id: string;
    profile: {
        name: string;
        username: string;
        image: string;
    };
}
interface Configuration {
    buildCommand: string;
    installCommand: string;
    workspace: string;
    publishDir: string;
    framework: FrameworkEnum;
    nodeVersion: NodeVersionEnum;
}
interface Project {
    id: string;
    name: string;
    state: ProjectStateEnum;
    url: string;
    organizationId: string;
    provider: ProviderEnum;
    configuration: Configuration;
}
interface DeploymentEnvironment {
    id: string;
    name: string;
    protocol: ProtocolEnum;
    branches: string[];
}
interface EnvironmentVariable {
    id: string;
    name: string;
    value: string;
    environments: string[];
}
interface Domain {
    id: string;
    name: string;
    verified: boolean;
    link: string;
    type: DomainTypeEnum;
    projectId: string;
    deploymentEnvironmentIds: string[];
}
interface Deployment {
    id: string;
    status: DeploymentStatusEnum;
    configuration: Configuration;
    buildTime: number;
    fileSize: number;
    deploymentEnvironmentName: string;
    commitId: string;
    branch: string;
    protocol: ProtocolEnum;
    sitePreview: string;
}
interface DeploymentLog {
    log: string;
    time: string;
}
interface StartDeploymentConfiguration {
    gitUrl: string;
    projectName: string;
    branch: string;
    protocol: ProtocolEnum;
    provider: ProviderEnum;
    configuration: {
        buildCommand: string;
        installCommand: string;
        workspace: string;
        publishDir: string;
        framework: FrameworkEnum | string;
        nodeVersion: NodeVersionEnum;
    };
    environmentVariables?: Record<string, string>;
    gitProviderPreferences?: {
        prComments?: boolean;
        commitComments?: boolean;
        buildStatus?: boolean;
        githubDeployment?: boolean;
    };
}
interface UsageWithLimits {
    used: {
        bandwidth: number;
        buildExecution: number;
        concurrentBuild: number;
        storageArweave: number;
        storageIPFS: number;
        deploymentsPerDay: number;
        domains: number;
        hnsDomains: number;
        ensDomains: number;
        environments: number;
        numberOfRequests: number;
        passwordProtection: number;
    };
    limit: {
        bandwidth: number;
        buildExecution: number;
        concurrentBuild: number;
        storageArweave: number;
        storageIPFS: number;
        deploymentsPerDay: number;
        domains: number;
        hnsDomains: number;
        ensDomains: number;
        environments: number;
        membersLimit: number;
    };
}
interface DeploymentCount {
    total: number;
    successful: number;
    failed: number;
    pending: number;
}
interface DeploymentResponse {
    success: boolean;
    message: string;
    deploymentId: string;
    projectId: string;
    deployment: Deployment;
}
interface CancelDeploymentResponse {
    message: string;
    canceled: boolean;
    killing: boolean;
}

declare class OrganizationManager extends ScopeExtractor {
    private readonly spheronApi;
    constructor(spheronApi: SpheronApi);
    get(): Promise<Organization>;
    getProjects(options: {
        skip: number;
        limit: number;
        state?: ProjectStateEnum;
    }): Promise<Project[]>;
    getProjectCount(options?: {
        state?: ProjectStateEnum;
    }): Promise<number>;
    getUsage(): Promise<UsageWithLimits>;
}

declare class ProjectManager {
    private readonly spheronApi;
    constructor(spheronApi: SpheronApi);
    get(projectId: string): Promise<Project>;
    archive(projectId: string): Promise<void>;
    unarchive(projectId: string): Promise<void>;
    updateConfiguration(projectId: string, configuration: Configuration): Promise<Configuration>;
    getEnvironmentVariables(projectId: string): Promise<EnvironmentVariable[]>;
    addEnvironmentVariable(projectId: string, environmentVariables: {
        name: string;
        value: string;
        environments: string[];
    }[]): Promise<EnvironmentVariable[]>;
    updateEnvironmentVariable(projectId: string, environmentVariableId: string, configuration: {
        name: string;
        value: string;
        environments: string[];
    }): Promise<EnvironmentVariable>;
    deleteEnvironmentVariable(projectId: string, environmentVariableId: string): Promise<void>;
    getDeploymentEnvironments(projectId: string): Promise<DeploymentEnvironment[]>;
    createDeploymentEnvironment(projectId: string, payload: {
        name: string;
        branches: string[];
        protocol: ProtocolEnum;
    }): Promise<DeploymentEnvironment>;
    updateDeploymentEnvironment(projectId: string, deploymentEnvironmentId: string, payload: {
        name: string;
        branches: string[];
        protocol: ProtocolEnum;
    }): Promise<DeploymentEnvironment>;
    deleteDeploymentEnvironment(projectId: string, deploymentEnvironmentId: string): Promise<void>;
    activateDeploymentEnvironment(projectId: string, deploymentEnvironmentId: string): Promise<DeploymentEnvironment>;
    deactivateDeploymentEnvironment(projectId: string, deploymentEnvironmentId: string): Promise<DeploymentEnvironment>;
    getDomains(projectId: string): Promise<Domain[]>;
    getDomain(projectId: string, domainIdentifier: string): Promise<Domain>;
    addDomain(projectId: string, payload: {
        link?: string;
        type: DomainTypeEnum | string;
        deploymentEnvironments?: string[];
        name: string;
    }): Promise<Domain>;
    updateDomain(projectId: string, domainIdentifier: string, payload: {
        link?: string;
        deploymentEnvironments?: string[];
        name: string;
    }): Promise<Domain>;
    verifyDomain(projectId: string, domainIdentifier: string): Promise<{
        success: boolean;
        domain: Domain;
    }>;
    getCdnDnsRecords(): Promise<{
        cdnARecords: string;
        cdnCnameRecords: string;
    }>;
    deleteDomain(projectId: string, domainIdentifier: string): Promise<void>;
    getDeployments(projectId: string, options: {
        skip: number;
        limit: number;
        status?: DeploymentStatusEnum;
    }): Promise<Deployment[]>;
    getDeploymentCount(projectId: string): Promise<DeploymentCount>;
}

declare class DeploymentManger extends ScopeExtractor {
    private readonly spheronApi;
    constructor(spheronApi: SpheronApi);
    get(deploymentId: string): Promise<Deployment>;
    getLogs(deploymentId: string): Promise<DeploymentLog[]>;
    deploy(configuration: StartDeploymentConfiguration): Promise<DeploymentResponse>;
    cancel(deploymentId: string): Promise<CancelDeploymentResponse>;
    authorize(deploymentId: string): Promise<{
        success: boolean;
        message: string;
        deploymentId: string;
        projectId: string;
        deployment: Deployment;
    }>;
    redeploy(deploymentId: string): Promise<{
        success: boolean;
        message: string;
        deploymentId: string;
        projectId: string;
        deployment: Deployment;
    }>;
}

interface SpheronClientConfiguration {
    token: string;
}
declare class SpheronClient {
    private readonly configuration;
    private readonly spheronApi;
    readonly organization: OrganizationManager;
    readonly projects: ProjectManager;
    readonly deployments: DeploymentManger;
    constructor(configuration: SpheronClientConfiguration);
    getTokenScope(): Promise<TokenScope>;
}

export { CancelDeploymentResponse, Configuration, Deployment, DeploymentCount, DeploymentEnvironment, DeploymentLog, DeploymentResponse, Domain, EnvironmentVariable, Organization, Project, SpheronClient, SpheronClientConfiguration, StartDeploymentConfiguration, UsageWithLimits, SpheronClient as default };
