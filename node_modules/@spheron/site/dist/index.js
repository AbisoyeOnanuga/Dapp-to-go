"use strict";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  DeploymentStatusEnum: () => import_core4.DeploymentStatusEnum,
  FrameworkEnum: () => import_core4.FrameworkEnum,
  NodeVersionEnum: () => import_core4.NodeVersionEnum,
  ProjectStateEnum: () => import_core4.ProjectStateEnum,
  ProtocolEnum: () => import_core4.ProtocolEnum,
  ProviderEnum: () => import_core4.ProviderEnum,
  SpheronClient: () => SpheronClient,
  TokenScope: () => import_core4.TokenScope,
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);

// src/organization-manager.ts
var import_core = require("@spheron/core");

// src/interface-mappers.ts
var mapCoreOrganization = (coreOrganization) => {
  return {
    id: coreOrganization._id,
    profile: {
      name: coreOrganization.profile.name,
      username: coreOrganization.profile.username,
      image: coreOrganization.profile.image
    }
  };
};
var mapCoreConfiguration = (configuration) => {
  return {
    buildCommand: configuration.buildCommand,
    installCommand: configuration.installCommand,
    workspace: configuration.workspace,
    publishDir: configuration.publishDir,
    framework: configuration.framework,
    nodeVersion: configuration.nodeVersion
  };
};
var mapCoreProject = (coreProject) => {
  return {
    id: coreProject._id,
    name: coreProject.name,
    state: coreProject.state,
    url: coreProject.url,
    organizationId: coreProject.organization,
    provider: coreProject.provider,
    configuration: mapCoreConfiguration(coreProject.configuration)
  };
};
var mapCoreDeploymentEnvironment = (deploymentEnvironment) => {
  return {
    id: deploymentEnvironment._id,
    name: deploymentEnvironment.name,
    protocol: deploymentEnvironment.protocol,
    branches: deploymentEnvironment.branches
  };
};
var mapCoreEnvironmentVariable = (coreVariable) => {
  return {
    id: coreVariable._id,
    name: coreVariable.name,
    value: coreVariable.value,
    environments: coreVariable.deploymentEnvironments.map((x) => x.name)
  };
};
var mapCoreDomain = (coreDomain) => {
  return {
    id: coreDomain._id,
    name: coreDomain.name,
    verified: coreDomain.verified,
    link: coreDomain.link,
    type: coreDomain.type,
    projectId: coreDomain.projectId,
    deploymentEnvironmentIds: coreDomain.deploymentEnvironmentIds
  };
};
var mapCoreUsageWithLimits = (usage) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w;
  return {
    used: {
      bandwidth: (_a = usage.usedBandwidth) != null ? _a : 0,
      buildExecution: (_b = usage.usedBuildExecution) != null ? _b : 0,
      concurrentBuild: (_c = usage.usedConcurrentBuild) != null ? _c : 0,
      storageArweave: (_d = usage.usedStorageArweave) != null ? _d : 0,
      storageIPFS: (_e = usage.usedStorageIPFS) != null ? _e : 0,
      deploymentsPerDay: (_f = usage.usedDeploymentsPerDay) != null ? _f : 0,
      domains: (_g = usage.usedDomains) != null ? _g : 0,
      hnsDomains: (_h = usage.usedHnsDomains) != null ? _h : 0,
      ensDomains: (_i = usage.usedEnsDomains) != null ? _i : 0,
      environments: (_j = usage.usedEnvironments) != null ? _j : 0,
      numberOfRequests: (_k = usage.usedNumberOfRequests) != null ? _k : 0,
      passwordProtection: (_l = usage.usedPasswordProtections) != null ? _l : 0
    },
    limit: {
      bandwidth: (_m = usage.bandwidthLimit) != null ? _m : 0,
      buildExecution: (_n = usage.buildExecutionLimit) != null ? _n : 0,
      concurrentBuild: (_o = usage.concurrentBuildLimit) != null ? _o : 0,
      storageArweave: (_p = usage.storageArweaveLimit) != null ? _p : 0,
      storageIPFS: (_q = usage.storageIPFSLimit) != null ? _q : 0,
      deploymentsPerDay: (_r = usage.deploymentsPerDayLimit) != null ? _r : 0,
      domains: (_s = usage.domainsLimit) != null ? _s : 0,
      hnsDomains: (_t = usage.hnsDomainsLimit) != null ? _t : 0,
      ensDomains: (_u = usage.ensDomainsLimit) != null ? _u : 0,
      environments: (_v = usage.environmentsLimit) != null ? _v : 0,
      membersLimit: (_w = usage.membersLimit) != null ? _w : 0
    }
  };
};
var mapCoreDeployment = (coreDeployment) => {
  return {
    id: coreDeployment._id,
    status: coreDeployment.status,
    configuration: mapCoreConfiguration(coreDeployment.configuration),
    buildTime: coreDeployment.buildTime,
    fileSize: coreDeployment.memoryUsed,
    deploymentEnvironmentName: coreDeployment.deploymentEnvironmentName,
    commitId: coreDeployment.commitId,
    branch: coreDeployment.branch,
    protocol: coreDeployment.protocol,
    sitePreview: coreDeployment.sitePreview
  };
};
var mapCoreDeploymentLogs = (coreDeployment) => {
  return coreDeployment.logs.map((x) => ({
    log: x.log,
    time: x.time
  }));
};

// src/organization-manager.ts
var OrganizationManager = class extends import_core.ScopeExtractor {
  constructor(spheronApi) {
    super(spheronApi);
    this.spheronApi = spheronApi;
  }
  get() {
    return __async(this, null, function* () {
      const organizationId = yield this.getOrganizationIdFromToken();
      const organization = yield this.spheronApi.getOrganization(organizationId);
      return mapCoreOrganization(organization);
    });
  }
  getProjects(options) {
    return __async(this, null, function* () {
      const organizationId = yield this.getOrganizationIdFromToken();
      const projects = yield this.spheronApi.getOrganizationProjects(
        organizationId,
        options
      );
      return projects.map((x) => mapCoreProject(x));
    });
  }
  getProjectCount(options) {
    return __async(this, null, function* () {
      const organizationId = yield this.getOrganizationIdFromToken();
      return yield this.spheronApi.getOrganizationProjectCount(
        organizationId,
        options != null ? options : {}
      );
    });
  }
  getUsage() {
    return __async(this, null, function* () {
      const organizationId = yield this.getOrganizationIdFromToken();
      const usage = yield this.spheronApi.getOrganizationUsage(
        organizationId,
        "wa-global"
      );
      const _a = usage, { usedStorageSkynet, storageSkynetLimit } = _a, resultWithoutSkynet = __objRest(_a, ["usedStorageSkynet", "storageSkynetLimit"]);
      return mapCoreUsageWithLimits(resultWithoutSkynet);
    });
  }
};
var organization_manager_default = OrganizationManager;

// src/project-manager.ts
var import_core2 = require("@spheron/core");
var ProjectManager = class {
  constructor(spheronApi) {
    this.spheronApi = spheronApi;
  }
  get(projectId) {
    return __async(this, null, function* () {
      const project = yield this.spheronApi.getProject(projectId);
      return mapCoreProject(project);
    });
  }
  archive(projectId) {
    return __async(this, null, function* () {
      yield this.spheronApi.updateProjectState(
        projectId,
        import_core2.ProjectStateEnum.ARCHIVED
      );
    });
  }
  unarchive(projectId) {
    return __async(this, null, function* () {
      yield this.spheronApi.updateProjectState(
        projectId,
        import_core2.ProjectStateEnum.MAINTAINED
      );
    });
  }
  updateConfiguration(projectId, configuration) {
    return __async(this, null, function* () {
      const { configuration: updated } = yield this.spheronApi.updateProjectConfiguration(
        projectId,
        configuration
      );
      return mapCoreConfiguration(updated);
    });
  }
  getEnvironmentVariables(projectId) {
    return __async(this, null, function* () {
      const project = yield this.spheronApi.getProject(projectId);
      return project.environmentVariables.map(
        (x) => mapCoreEnvironmentVariable(x)
      );
    });
  }
  addEnvironmentVariable(projectId, environmentVariables) {
    return __async(this, null, function* () {
      const { environmentVariables: added } = yield this.spheronApi.addProjectEnvironmentVariables(
        projectId,
        environmentVariables
      );
      return added.map((x) => mapCoreEnvironmentVariable(x));
    });
  }
  updateEnvironmentVariable(projectId, environmentVariableId, configuration) {
    return __async(this, null, function* () {
      const updated = yield this.spheronApi.updateProjectEnvironmentVariable(
        projectId,
        environmentVariableId,
        configuration
      );
      return mapCoreEnvironmentVariable(updated);
    });
  }
  deleteEnvironmentVariable(projectId, environmentVariableId) {
    return __async(this, null, function* () {
      yield this.spheronApi.deleteProjectEnvironmentVariable(
        projectId,
        environmentVariableId
      );
    });
  }
  getDeploymentEnvironments(projectId) {
    return __async(this, null, function* () {
      const deploymentEnvironments = yield this.spheronApi.getDeploymentEnvironments(projectId);
      return deploymentEnvironments.map((x) => mapCoreDeploymentEnvironment(x));
    });
  }
  createDeploymentEnvironment(projectId, payload) {
    return __async(this, null, function* () {
      const added = yield this.spheronApi.createDeploymentEnvironment(
        projectId,
        payload
      );
      return mapCoreDeploymentEnvironment(added);
    });
  }
  updateDeploymentEnvironment(projectId, deploymentEnvironmentId, payload) {
    return __async(this, null, function* () {
      const updated = yield this.spheronApi.updateDeploymentEnvironment(
        projectId,
        deploymentEnvironmentId,
        payload
      );
      return mapCoreDeploymentEnvironment(updated);
    });
  }
  deleteDeploymentEnvironment(projectId, deploymentEnvironmentId) {
    return __async(this, null, function* () {
      yield this.spheronApi.deleteDeploymentEnvironment(
        projectId,
        deploymentEnvironmentId
      );
    });
  }
  activateDeploymentEnvironment(projectId, deploymentEnvironmentId) {
    return __async(this, null, function* () {
      const updated = yield this.spheronApi.activateDeploymentEnvironment(
        projectId,
        deploymentEnvironmentId
      );
      return mapCoreDeploymentEnvironment(updated);
    });
  }
  deactivateDeploymentEnvironment(projectId, deploymentEnvironmentId) {
    return __async(this, null, function* () {
      const updated = yield this.spheronApi.deactivateDeploymentEnvironment(
        projectId,
        deploymentEnvironmentId
      );
      return mapCoreDeploymentEnvironment(updated);
    });
  }
  getDomains(projectId) {
    return __async(this, null, function* () {
      const { domains } = yield this.spheronApi.getProjectDomains(projectId);
      return domains.map((x) => mapCoreDomain(x));
    });
  }
  getDomain(projectId, domainIdentifier) {
    return __async(this, null, function* () {
      const { domain } = yield this.spheronApi.getProjectDomain(
        projectId,
        domainIdentifier
      );
      return mapCoreDomain(domain);
    });
  }
  addDomain(projectId, payload) {
    return __async(this, null, function* () {
      const { domain } = yield this.spheronApi.addProjectDomain(
        projectId,
        payload
      );
      return mapCoreDomain(domain);
    });
  }
  updateDomain(projectId, domainIdentifier, payload) {
    return __async(this, null, function* () {
      const { domain } = yield this.spheronApi.patchProjectDomain(
        projectId,
        domainIdentifier,
        payload
      );
      return mapCoreDomain(domain);
    });
  }
  verifyDomain(projectId, domainIdentifier) {
    return __async(this, null, function* () {
      const { success, domain } = yield this.spheronApi.verifyProjectDomain(
        projectId,
        domainIdentifier
      );
      return { success, domain: mapCoreDomain(domain) };
    });
  }
  getCdnDnsRecords() {
    return __async(this, null, function* () {
      const { recordIpv4V2, recordCnameV2 } = yield this.spheronApi.getCdnRecords();
      return {
        cdnARecords: recordIpv4V2,
        cdnCnameRecords: recordCnameV2
      };
    });
  }
  deleteDomain(projectId, domainIdentifier) {
    return __async(this, null, function* () {
      yield this.spheronApi.deleteProjectDomain(projectId, domainIdentifier);
    });
  }
  getDeployments(projectId, options) {
    return __async(this, null, function* () {
      const { deployments } = yield this.spheronApi.getProjectDeployments(
        projectId,
        options
      );
      return deployments.map((x) => mapCoreDeployment(x));
    });
  }
  getDeploymentCount(projectId) {
    return __async(this, null, function* () {
      return yield this.spheronApi.getProjectDeploymentCount(projectId);
    });
  }
};
var project_manager_default = ProjectManager;

// src/deployment-manager.ts
var import_core3 = require("@spheron/core");
var DeploymentManger = class extends import_core3.ScopeExtractor {
  constructor(spheronApi) {
    super(spheronApi);
    this.spheronApi = spheronApi;
  }
  get(deploymentId) {
    return __async(this, null, function* () {
      const deployment = yield this.spheronApi.getDeployment(deploymentId);
      return mapCoreDeployment(deployment);
    });
  }
  getLogs(deploymentId) {
    return __async(this, null, function* () {
      const deployment = yield this.spheronApi.getDeployment(deploymentId);
      return mapCoreDeploymentLogs(deployment);
    });
  }
  deploy(configuration) {
    return __async(this, null, function* () {
      const response = yield this.spheronApi.startDeployment(__spreadProps(__spreadValues({
        organizationId: yield this.getOrganizationIdFromToken()
      }, configuration), {
        env: configuration.environmentVariables,
        repoName: configuration.projectName,
        createDefaultWebhook: true
      }));
      return {
        success: response.success,
        message: response.message,
        deploymentId: response.deploymentId,
        projectId: response.projectId,
        deployment: mapCoreDeployment(response.deployment)
      };
    });
  }
  cancel(deploymentId) {
    return __async(this, null, function* () {
      return yield this.spheronApi.cancelDeployment(deploymentId);
    });
  }
  authorize(deploymentId) {
    return __async(this, null, function* () {
      const response = yield this.spheronApi.authorizeDeployment(deploymentId);
      return {
        success: response.success,
        message: response.message,
        deploymentId: response.deploymentId,
        projectId: response.projectId,
        deployment: mapCoreDeployment(response.deployment)
      };
    });
  }
  redeploy(deploymentId) {
    return __async(this, null, function* () {
      const response = yield this.spheronApi.redeployDeployment(deploymentId);
      return {
        success: response.success,
        message: response.message,
        deploymentId: response.deploymentId,
        projectId: response.projectId,
        deployment: mapCoreDeployment(response.deployment)
      };
    });
  }
};
var deployment_manager_default = DeploymentManger;

// src/index.ts
var import_core4 = require("@spheron/core");
var SpheronClient = class {
  constructor(configuration) {
    this.configuration = configuration;
    this.spheronApi = new import_core4.SpheronApi(this.configuration.token);
    this.projects = new project_manager_default(this.spheronApi);
    this.deployments = new deployment_manager_default(this.spheronApi);
    this.organization = new organization_manager_default(this.spheronApi);
  }
  getTokenScope() {
    return __async(this, null, function* () {
      return yield this.spheronApi.getTokenScope();
    });
  }
};
var src_default = SpheronClient;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DeploymentStatusEnum,
  FrameworkEnum,
  NodeVersionEnum,
  ProjectStateEnum,
  ProtocolEnum,
  ProviderEnum,
  SpheronClient,
  TokenScope
});
